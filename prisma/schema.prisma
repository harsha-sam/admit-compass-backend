// This is your Prisma schema file,
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  clerkId    String   @unique
  email      String   @unique
  role       String
  createdAt  DateTime @default(now())
}

enum ProgramCategory {
  BACHELOR
  MASTER
  ACCELERATED
  PHD
}

enum AttributeType {
  singleLineText
  multiLineText
  number
  date
  datetime
  boolean
  dropdown
  multiselect
  file
  calculated
}

model AttributeCategory {
  categoryId   Int       @id @default(autoincrement())
  name          String    @unique   // Name of the category
  description   String?   // Optional description of the category
  attributes    Attribute[] // One-to-many relationship with attributes
}

model Attribute {
  attributeId   Int             @id @default(autoincrement())
  name           String          @unique
  description    String
  displayName   String
  categoryId     Int?
  type           AttributeType
  validationRule Json?           // JSON for validation rules (e.g., min, max)
  isGlobal       Boolean         // Indicates if the attribute is global or local
  options        Json?
  rulesetId      Int?                   
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  category      AttributeCategory? @relation(fields: [categoryId], references: [categoryId])
  rulesetAttributeConfig RulesetAttributeConfig[]
}

model Program {
  programId       Int              @id @default(autoincrement())
  name             String           @unique
  description      String?
  programCategory ProgramCategory  // Bachelor, Master, etc.
  programType     String           // Type of degree (e.g., "B.S.", "M.P.S.", "Ph.D.")
  umbcLink        String?
  rubricId        Int?             // Foreign key to associate with a rubric
  rubric           Rubric?          @relation(fields: [rubricId], references: [rubricId])
  rulesetId       Int?
}

model Rubric {
  rubricId       Int              @id @default(autoincrement())
  name            String
  maxWeight      Int              @default(0) // Default to 0
  programs         Program[]       // A Rubric can be associated with multiple Programs
  rubricRulesets  RubricRuleset[] // Many-to-Many relation with Rulesets

  rubricSectionConfig RubricSectionConfig[]
}

model Ruleset {
  rulesetId     Int            @id @default(autoincrement())
  name           String
  description   String
  baseWeight    Int            @default(0)
  maxWeight     Int
  rules          Rule[]
  attribute_ids  Int[]
  rubricRulesets RubricRuleset[] // Relation with the junction table
  rubricSectionConfig RubricSectionConfig[]
  rulesetAttributeConfig RulesetAttributeConfig[]
}

model RubricRuleset {
  rubricId  Int @map("rubric_id")
  rulesetId Int @map("ruleset_id")
  rubric     Rubric  @relation(fields: [rubricId], references: [rubricId])
  ruleset    Ruleset @relation(fields: [rulesetId], references: [rulesetId])

  @@id([rubricId, rulesetId]) // Composite primary key for the junction table
}

model Rule {
  ruleId            Int           @id @default(autoincrement()) @map("rule_id")
  rulesetId         Int?           @map("ruleset_id")
  parentRuleId      Int?          @map("parent_rule_id") // Points to the parent rule for nested logic
  targetAttributeId Int?        @map("target_attribute_id")
  targetOptionValue String?     @map("target_option_value")
  logicOperator     String?       // AND, OR (applicable for parent rules)
  action           Json?         // Optional to allow parent rules without an action
  parentRule        Rule?         @relation("RuleHierarchy", fields: [parentRuleId], references: [ruleId])
  childRules        Rule[]        @relation("RuleHierarchy")
  ruleset           Ruleset?       @relation(fields: [rulesetId], references: [rulesetId], onDelete: Cascade)
  conditions        Condition[]   
}

model Condition {
  conditionId           Int       @id @default(autoincrement()) @map("condition_id")
  ruleId                Int       @map("rule_id")
  evaluatedAttributeId  Int       @map("evaluated_attribute_id")
  operator              String
  value1                Json      @map("value_1")
  value2                Json?     @map("value_2")
  rule                  Rule      @relation(fields: [ruleId], references: [ruleId], onDelete: Cascade)
}

model RulesetAttributeConfig {
  configId         Int        @id @default(autoincrement()) @map("config_id")
  rulesetId        Int        @map("ruleset_id")
  attributeId      Int        @map("attribute_id")
  displayOrder     Int        @map("display_order")
  ruleset          Ruleset    @relation(fields: [rulesetId], references: [rulesetId])
  attribute        Attribute  @relation(fields: [attributeId], references: [attributeId])
}

model RubricSectionConfig {
  sectionId       Int        @id @default(autoincrement()) @map("section_id")
  rubricId        Int        @map("rubric_id")
  rulesetId       Int        @map("ruleset_id")
  sectionOrder    Int        @map("section_order")
  sectionName     String     @map("section_name")
  rubric          Rubric     @relation(fields: [rubricId], references: [rubricId])
  ruleset         Ruleset    @relation(fields: [rulesetId], references: [rulesetId])
}


model Attachment {
  attachmentId                  Int                @id @default(autoincrement())
  submissionId                  Int
  filePath                      String
  attachmentType                String
  StudentSubmission              StudentSubmission? @relation(fields: [studentSubmissionSubmissionId], references: [submissionId])
  studentSubmissionSubmissionId Int?
}

model StudentSubmission {
  submissionId    Int          @id @default(autoincrement())
  programId       Int
  studentId       String
  submissionData  Json
  evaluationScore Json
  attachments      Attachment[]
}
